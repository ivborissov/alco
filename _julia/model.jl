#= 
    This code was generated by heta-compiler 0.6.6
    
=#

__platform__ = (function()

### create default constants
nameless_constants_num_ = NamedTuple{(
  
)}(Float64[
  
])

### create default observables
nameless_records_output_ = NamedTuple{(
  
)}(Bool[
  
])

### create default events
nameless_events_active_ = NamedTuple{(
  
)}(Bool[
  
])

### initialization of ODE variables and Records
function nameless_init_func_(cons)
    #() = cons

    # Heta initialize
    t = 0.0 # initial time
    
    # save results

    return ([ 0.0 ], # init for fake variable
        Float64[
        ]
    )
end

### calculate RHS of ODE
function nameless_ode_func_(du, u, p, t)
    cons = p.constants
    () = p.static
    () = u 

    # Heta rules
    
    #p.static .= []
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function nameless_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        () = integrator.p.static
        () = u

        # Heta rules
        
        # force amount

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###

### D EVENTS ###

### STOP EVENTS ###

### event assignments


### MODELS ###

nameless_model_ = (
  nameless_init_func_,
  nameless_ode_func_,
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  nameless_saving_generator_,
  nameless_constants_num_,
  nameless_events_active_,
  nameless_records_output_
)
### create default constants
mod1_constants_num_ = NamedTuple{(
  :k_a,:Vd,:Vmax,:Km,:body_weight,:dose_first,:dose_last,:sigma_add,:sigma_prop,
)}(Float64[
  0.062,0.457,0.136,0.096,70,0.186,0.112,0.1,0,
])

### create default observables
mod1_records_output_ = NamedTuple{(
  :gut,:blood,:q_a,:C,:BrAC,:vabs,:vel,:sigma1,
)}(Bool[
  false,false,true,true,true,false,false,true,
])

### create default events
mod1_events_active_ = NamedTuple{(
  :adm1,:adm2,:adm3,:adm4,
)}(Bool[
  true,true,true,true,
])

### initialization of ODE variables and Records
function mod1_init_func_(cons)
    #(k_a,Vd,Vmax,Km,body_weight,dose_first,dose_last,sigma_add,sigma_prop,) = cons

    # Heta initialize
    t = 0.0 # initial time
    gut = 1.0
    C = 0.0
    BrAC = C / 1.0
    q_a = 0.0
    vabs = cons[1] * q_a
    blood = cons[2] * cons[5]
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # save results

    return (
        Float64[
            q_a,
            C * blood,
        ],
        Float64[
            gut,
            blood,
        ]
    )
end

### calculate RHS of ODE
function mod1_ode_func_(du, u, p, t)
    cons = p.constants
    (gut,blood,) = p.static
    (q_a,C_,) = u 

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    #p.static .= [gut,blood,]
    du .= [
      -vabs,  # dq_a_/dt
      vabs-vel,  # dC_/dt
    ]
end

### output function
function mod1_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (gut,blood,) = integrator.p.static
        (q_a,C_,) = u

        # Heta rules
        C = C_ / blood
        BrAC = C / 1.0
        vabs = cons[1] * q_a
        vel = cons[3] * C / (cons[4] + C) * blood
        sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
        
        # force amount
        q_a_ = q_a

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###
function mod1_adm1_tstops_func_(cons, times)
    return [0.0]
end
function mod1_adm2_tstops_func_(cons, times)
    return [0.333]
end
function mod1_adm3_tstops_func_(cons, times)
    return [0.667]
end
function mod1_adm4_tstops_func_(cons, times)
    return [1.5]
end

### D EVENTS ###

### STOP EVENTS ###

### event assignments
function mod1_adm1_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod1_adm2_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod1_adm3_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod1_adm4_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[3] * C / (cons[4] + C) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[7] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end


### MODELS ###

mod1_model_ = (
  mod1_init_func_,
  mod1_ode_func_,
  NamedTuple{(
    :adm1,
    :adm2,
    :adm3,
    :adm4,
  )}([
    (mod1_adm1_tstops_func_, mod1_adm1_affect_func_, :adm1, false),
    (mod1_adm2_tstops_func_, mod1_adm2_affect_func_, :adm2, false),
    (mod1_adm3_tstops_func_, mod1_adm3_affect_func_, :adm3, false),
    (mod1_adm4_tstops_func_, mod1_adm4_affect_func_, :adm4, false),
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  mod1_saving_generator_,
  mod1_constants_num_,
  mod1_events_active_,
  mod1_records_output_
)
### create default constants
mod2_constants_num_ = NamedTuple{(
  :k_a,:Vd,:Vmax,:Km,:body_weight,:dose_first,:dose_last,:sigma_add,:sigma_prop,:ke,
)}(Float64[
  0.062,0.457,0.136,0.096,70,0.186,0.112,0.1,0,0.011,
])

### create default observables
mod2_records_output_ = NamedTuple{(
  :gut,:blood,:q_a,:C,:BrAC,:vabs,:vel,:sigma1,
)}(Bool[
  false,false,true,true,true,false,false,true,
])

### create default events
mod2_events_active_ = NamedTuple{(
  :adm1,:adm2,:adm3,:adm4,
)}(Bool[
  true,true,true,true,
])

### initialization of ODE variables and Records
function mod2_init_func_(cons)
    #(k_a,Vd,Vmax,Km,body_weight,dose_first,dose_last,sigma_add,sigma_prop,ke,) = cons

    # Heta initialize
    t = 0.0 # initial time
    gut = 1.0
    C = 0.0
    BrAC = C / 1.0
    q_a = 0.0
    vabs = cons[1] * q_a
    blood = cons[2] * cons[5]
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # save results

    return (
        Float64[
            q_a,
            C * blood,
        ],
        Float64[
            gut,
            blood,
        ]
    )
end

### calculate RHS of ODE
function mod2_ode_func_(du, u, p, t)
    cons = p.constants
    (gut,blood,) = p.static
    (q_a,C_,) = u 

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    #p.static .= [gut,blood,]
    du .= [
      -vabs,  # dq_a_/dt
      vabs-vel,  # dC_/dt
    ]
end

### output function
function mod2_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (gut,blood,) = integrator.p.static
        (q_a,C_,) = u

        # Heta rules
        C = C_ / blood
        BrAC = C / 1.0
        vabs = cons[1] * q_a
        vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
        sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
        
        # force amount
        q_a_ = q_a

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###
function mod2_adm1_tstops_func_(cons, times)
    return [0.0]
end
function mod2_adm2_tstops_func_(cons, times)
    return [0.333]
end
function mod2_adm3_tstops_func_(cons, times)
    return [0.667]
end
function mod2_adm4_tstops_func_(cons, times)
    return [1.5]
end

### D EVENTS ###

### STOP EVENTS ###

### event assignments
function mod2_adm1_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod2_adm2_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod2_adm3_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod2_adm4_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = cons[10] * C * blood + cons[3] * C / (cons[4] + abs(C)) * blood
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[7] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end


### MODELS ###

mod2_model_ = (
  mod2_init_func_,
  mod2_ode_func_,
  NamedTuple{(
    :adm1,
    :adm2,
    :adm3,
    :adm4,
  )}([
    (mod2_adm1_tstops_func_, mod2_adm1_affect_func_, :adm1, false),
    (mod2_adm2_tstops_func_, mod2_adm2_affect_func_, :adm2, false),
    (mod2_adm3_tstops_func_, mod2_adm3_affect_func_, :adm3, false),
    (mod2_adm4_tstops_func_, mod2_adm4_affect_func_, :adm4, false),
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  mod2_saving_generator_,
  mod2_constants_num_,
  mod2_events_active_,
  mod2_records_output_
)
### create default constants
mod3_constants_num_ = NamedTuple{(
  :k_a,:Vd,:Vmax,:Km,:body_weight,:dose_first,:dose_last,:sigma_add,:sigma_prop,:t_sw,:ke,
)}(Float64[
  0.062,0.457,0.136,0.096,70,0.186,0.112,0.1,0,2.6,0.011,
])

### create default observables
mod3_records_output_ = NamedTuple{(
  :gut,:blood,:q_a,:C,:BrAC,:vabs,:vel,:sigma1,
)}(Bool[
  false,false,true,true,true,false,false,true,
])

### create default events
mod3_events_active_ = NamedTuple{(
  :adm1,:adm2,:adm3,:adm4,
)}(Bool[
  true,true,true,true,
])

### initialization of ODE variables and Records
function mod3_init_func_(cons)
    #(k_a,Vd,Vmax,Km,body_weight,dose_first,dose_last,sigma_add,sigma_prop,t_sw,ke,) = cons

    # Heta initialize
    t = 0.0 # initial time
    gut = 1.0
    C = 0.0
    BrAC = C / 1.0
    q_a = 0.0
    vabs = cons[1] * q_a
    blood = cons[2] * cons[5]
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # save results

    return (
        Float64[
            q_a,
            C * blood,
        ],
        Float64[
            gut,
            blood,
        ]
    )
end

### calculate RHS of ODE
function mod3_ode_func_(du, u, p, t)
    cons = p.constants
    (gut,blood,) = p.static
    (q_a,C_,) = u 

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    #p.static .= [gut,blood,]
    du .= [
      -vabs,  # dq_a_/dt
      vabs-vel,  # dC_/dt
    ]
end

### output function
function mod3_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (gut,blood,) = integrator.p.static
        (q_a,C_,) = u

        # Heta rules
        C = C_ / blood
        BrAC = C / 1.0
        vabs = cons[1] * q_a
        vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
        sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
        
        # force amount
        q_a_ = q_a

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###
function mod3_adm1_tstops_func_(cons, times)
    return [0.0]
end
function mod3_adm2_tstops_func_(cons, times)
    return [0.333]
end
function mod3_adm3_tstops_func_(cons, times)
    return [0.667]
end
function mod3_adm4_tstops_func_(cons, times)
    return [1.5]
end

### D EVENTS ###

### STOP EVENTS ###

### event assignments
function mod3_adm1_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod3_adm2_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod3_adm3_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[6] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end
function mod3_adm4_affect_func_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    (gut,blood,) = integrator.p.static
    (q_a,C_,) = integrator.u

    # Heta rules
    C = C_ / blood
    BrAC = C / 1.0
    vabs = cons[1] * q_a
    vel = (t < cons[10]) ? (cons[11] * C * blood) : (cons[3] * C / (cons[4] + abs(C)) * blood)
    sigma1 = sqrt(cons[8] ^ 2.0 + C ^ 2.0 * cons[9] ^ 2.0)
    
    # recalculated values
    (q_a,) = (q_a + cons[7] * cons[5],)
    
    # save results
    integrator.u[[1,]] = [
        q_a,
    ]
    integrator.p.static[[]] = [
    ]
end


### MODELS ###

mod3_model_ = (
  mod3_init_func_,
  mod3_ode_func_,
  NamedTuple{(
    :adm1,
    :adm2,
    :adm3,
    :adm4,
  )}([
    (mod3_adm1_tstops_func_, mod3_adm1_affect_func_, :adm1, false),
    (mod3_adm2_tstops_func_, mod3_adm2_affect_func_, :adm2, false),
    (mod3_adm3_tstops_func_, mod3_adm3_affect_func_, :adm3, false),
    (mod3_adm4_tstops_func_, mod3_adm4_affect_func_, :adm4, false),
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  mod3_saving_generator_,
  mod3_constants_num_,
  mod3_events_active_,
  mod3_records_output_
)

### OUTPUT ###

return (
  (
    nameless = nameless_model_,
    mod1 = mod1_model_,
    mod2 = mod2_model_,
    mod3 = mod3_model_,
  ),
  (),
  "0.6.6"
)

end
)()